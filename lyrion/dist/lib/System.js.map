{"version":3,"file":"System.js","sourceRoot":"","sources":["../../src/lib/System.ts"],"names":[],"mappings":"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","sourcesContent":["import lyrion from './LyrionContext';\nimport { exec } from 'child_process';\nimport fs from 'fs';\nimport { EOL } from 'os';\n\nconst SYSTEMD_SERVICE_NAME = 'logitechmediaserver'\nconst PREFS_FILE = '/var/lib/squeezeboxserver/prefs/server.prefs';\nconst DEFAULT_SERVER_PORT = '9000';\n\nfunction execCommand(cmd: string, sudo = false) {\n  return new Promise<string>((resolve, reject) => {\n    lyrion.getLogger().info(`[lyrion] Executing ${cmd}`);\n    exec(sudo ? `echo volumio | sudo -S ${cmd}` : cmd, { uid: 1000, gid: 1000 }, function (error, stdout, stderr) {\n      if (error) {\n        lyrion.getLogger().error(lyrion.getErrorMessage(`[lyrion] Failed to execute ${cmd}: ${stderr.toString()}`, error));\n        reject(error);\n      }\n      else {\n        resolve(stdout.toString());\n      }\n    });\n  });\n}\n\nfunction systemctl(cmd: string, service = '') {\n  const fullCmd = `/usr/bin/sudo /bin/systemctl ${cmd} ${service} || true`;\n  return execCommand(fullCmd);\n}\n\nfunction resolveOnServiceStatusMatch(status: string | string[], matchConsecutive = 1, retries = 5) {\n  let consecutiveCount = 0;\n  let tryCount = 0;\n\n  const startCheckTimer = (resolve: (value?: unknown) => void, reject: () => void) => {\n    setTimeout(() => {\n      void (async() => {\n        const _status = await getServiceStatus();\n        if (Array.isArray(status) ? status.includes(_status) : _status === status) {\n          consecutiveCount++;\n          if (consecutiveCount === matchConsecutive) {\n            resolve();\n          }\n          else {\n            startCheckTimer(resolve, reject);\n          }\n        }\n        else if (_status === 'failed') {\n          reject();\n        }\n        else if (_status === 'activating') {\n          consecutiveCount = 0;\n          startCheckTimer(resolve, reject);\n        }\n        else if (tryCount < retries - 1) {\n          consecutiveCount = 0;\n          tryCount++;\n          startCheckTimer(resolve, reject);\n        }\n        else {\n          reject();\n        }\n      })();\n    }, 500);\n  };\n\n\n  return new Promise((resolve, reject) => {\n    startCheckTimer(resolve, reject);\n  });\n}\n\nexport async function startService() {\n  await systemctl('start', SYSTEMD_SERVICE_NAME);\n  await resolveOnServiceStatusMatch('active', 5);\n}\n\nexport async function stopService() {\n  await systemctl('stop', SYSTEMD_SERVICE_NAME);\n  return resolveOnServiceStatusMatch([ 'inactive', 'failed' ]);\n}\n\nexport async function getServiceStatus() {\n  const recognizedStatuses = [ 'inactive', 'active', 'activating', 'failed' ];\n  const regex = /Active: (.*) \\(.*\\)/gm;\n  const out = await systemctl('status', SYSTEMD_SERVICE_NAME);\n  const matches = [ ...out.matchAll(regex) ];\n  if (matches[0] && matches[0][1] && recognizedStatuses.includes(matches[0][1])) {\n    return matches[0][1];\n  }\n\n  return 'inactive';\n}\n\nexport function getServerPrefs() {\n  if (!fs.existsSync(PREFS_FILE)) {\n    return {};\n  }\n  try {\n    const prefs = fs.readFileSync(PREFS_FILE, 'utf8');\n    const parsed = prefs.split(EOL).reduce<Record<string, string>>((result, row) => {\n      const h = row.split(':');\n      if (h.length === 2) {\n        const prop = h[0].trim();\n        const value = h[1].trim();\n        let parsedValue = value;\n        if (value.startsWith('\\'') && value.endsWith('\\'')) {\n          parsedValue = value.substring(1, value.length - 1);\n        }\n        Reflect.set(result, prop, parsedValue);\n      }\n      return result;\n    }, {});\n    return parsed;\n    \n  }\n  catch (error: unknown) {\n    lyrion.getLogger().error(lyrion.getErrorMessage('[lyrion] Error reading server prefs file:', error));\n    return {};\n  }\n}\n\nexport function getServerPort() {\n  const prefs = getServerPrefs();\n  return prefs['httpport'] || DEFAULT_SERVER_PORT;\n}\n"]}