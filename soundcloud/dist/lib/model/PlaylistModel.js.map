{"version":3,"file":"PlaylistModel.js","sourceRoot":"","sources":["../../../src/lib/model/PlaylistModel.ts"],"names":[],"mappings":"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","sourcesContent":["import sc from '../SoundCloudContext';\nimport BaseModel, { type LoopFetchCallbackParams } from './BaseModel';\nimport { type Playlist, Constants, type SystemPlaylist } from 'soundcloud-fetch';\nimport Mapper from './Mapper';\nimport TrackHelper from '../util/TrackHelper';\nimport type PlaylistEntity from '../entities/PlaylistEntity';\n\nexport interface PlaylistModelGetPlaylistsParams {\n  search?: string;\n  userId?: number;\n  pageToken?: string;\n  pageOffset?: number;\n  limit?: number;\n}\n\nexport interface PlaylistModelGetPlaylistParams {\n  tracksOffset?: number;\n  tracksLimit?: number;\n  loadTracks?: boolean;\n  type?: 'system';\n}\n\ninterface GetPlaylistsLoopFetchCallbackParams extends LoopFetchCallbackParams {\n  search?: string;\n  userId?: number;\n}\n\nexport default class PlaylistModel extends BaseModel {\n\n  getPlaylists(params: PlaylistModelGetPlaylistsParams) {\n    const getItems = this.commonGetCollectionItemsFromLoopFetchResult<Playlist>;\n    const getNextPageToken = this.commonGetNextPageTokenFromLoopFetchResult<Playlist>;\n\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getPlaylistsFetchPromise.bind(this),\n      getItemsFromFetchResult: getItems.bind(this),\n      getNextPageTokenFromFetchResult: getNextPageToken.bind(this),\n      convertToEntity: this.#convertFetchedPlaylistToEntity.bind(this),\n      pageToken: params.pageToken,\n      pageOffset: params.pageOffset,\n      limit: params.limit\n    });\n  }\n\n  async #getPlaylistsFetchPromise(params: GetPlaylistsLoopFetchCallbackParams) {\n    const api = this.getSoundCloudAPI();\n\n    const continuationContents = await this.commonGetLoopFetchResultByPageToken<Playlist>(params);\n    if (continuationContents) {\n      return continuationContents;\n    }\n\n    const queryParams: Record<string, any> = {\n      limit: Constants.QUERY_MAX_LIMIT\n    };\n    if (params.search) {\n      const q = params.search;\n      queryParams.type = 'playlist';\n      const cacheKeyParams = {\n        search: q,\n        ...queryParams\n      };\n      return sc.getCache().getOrSet(\n        this.getCacheKeyForFetch('playlists', cacheKeyParams),\n        () => api.search(q, {...queryParams, type: 'playlist'})\n      );\n    }\n    else if (params.userId !== undefined) {\n      const userId = params.userId;\n      const cacheKeyParams = {\n        userId,\n        ...queryParams\n      };\n      return sc.getCache().getOrSet(\n        this.getCacheKeyForFetch('playlists', cacheKeyParams),\n        () => api.getPlaylistsByUser(userId, queryParams)\n      );\n    }\n    throw Error('Missing or invalid criteria for playlists');\n  }\n\n  async #convertFetchedPlaylistToEntity(item: Playlist): Promise<PlaylistEntity> {\n    return Mapper.mapPlaylist(item);\n  }\n\n  async getPlaylist(playlistId: string | number, options: PlaylistModelGetPlaylistParams = {}) {\n    const cacheKeyParams = {\n      playlistId,\n      ...options\n    };\n    const info = await sc.getCache().getOrSet<SystemPlaylist | Playlist | null>(\n      this.getCacheKeyForFetch('playlist', cacheKeyParams),\n      () => {\n        if (options.type === 'system' && typeof playlistId === 'string') {\n          return this.getSoundCloudAPI().getSystemPlaylist(playlistId);\n        }\n        else if (options.type !== 'system' && typeof playlistId === 'number') {\n          return this.getSoundCloudAPI().getPlaylistOrAlbum(playlistId);\n        }\n        throw Error('Playlist ID has wrong type');\n      }\n    );\n    const playlist = info ? await Mapper.mapPlaylist(info) : null;\n    if (options.loadTracks && playlist && info) {\n      const offset = options.tracksOffset || 0;\n      const limit = options.tracksLimit || undefined;\n      const tracks = await info.getTracks({ offset, limit });\n      playlist.tracks = await Promise.all(tracks.map((track) => Mapper.mapTrack(track)));\n\n      TrackHelper.cacheTracks(playlist.tracks, this.getCacheKeyForFetch.bind(this, 'track'));\n    }\n    return playlist;\n  }\n}\n"]}