{"version":3,"file":"UserModel.js","sourceRoot":"","sources":["../../../src/lib/model/UserModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants, type User } from 'soundcloud-fetch';\nimport sc from '../SoundCloudContext';\nimport BaseModel, { type LoopFetchCallbackParams } from './BaseModel';\nimport type UserEntity from '../entities/UserEntity';\nimport Mapper from './Mapper';\n\nexport interface UserModelGetUsersParams {\n  search?: string;\n  myFollowing?: boolean;\n  pageToken?: string;\n  pageOffset?: number;\n  limit?: number;\n}\n\ninterface GetUsersLoopFetchCallbackParams extends LoopFetchCallbackParams {\n  search?: string;\n  myFollowing?: boolean;\n  topFeatured?: boolean;\n}\n\nexport default class UserModel extends BaseModel {\n\n  getUsers(params: UserModelGetUsersParams) {\n    const getItems = this.commonGetCollectionItemsFromLoopFetchResult<User>;\n    const getNextPageToken = this.commonGetNextPageTokenFromLoopFetchResult<User>;\n\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getUsersFetchPromise.bind(this),\n      getItemsFromFetchResult: getItems.bind(this),\n      getNextPageTokenFromFetchResult: getNextPageToken.bind(this),\n      convertToEntity: this.#convertFetchedUserToEntity.bind(this),\n      pageToken: params.pageToken,\n      pageOffset: params.pageOffset,\n      limit: params.limit\n    });\n  }\n\n  async #getUsersFetchPromise(params: GetUsersLoopFetchCallbackParams) {\n    const api = this.getSoundCloudAPI();\n\n    const continuationContents = await this.commonGetLoopFetchResultByPageToken<User>(params);\n    if (continuationContents) {\n      return continuationContents;\n    }\n\n    const queryParams: Record<string, any> = {\n      limit: Constants.QUERY_MAX_LIMIT\n    };\n    if (params.search) {\n      const q = params.search;\n      queryParams.type = 'user';\n      const cacheKeyParams = {\n        search: q,\n        ...queryParams\n      };\n      return sc.getCache().getOrSet(\n        this.getCacheKeyForFetch('users', cacheKeyParams),\n        () => api.search(q, {...queryParams, type: 'user'})\n      );\n    }\n    else if (params.myFollowing) {\n      const cacheKeyParams = {\n        myFollowing: true,\n        ...queryParams\n      };\n      return sc.getCache().getOrSet(\n        this.getCacheKeyForFetch('users', cacheKeyParams),\n        () => api.me.getFollowing(queryParams)\n      );\n    }\n    throw Error('Missing or invalid criteria for users');\n  }\n\n  #convertFetchedUserToEntity(data: User): Promise<UserEntity> {\n    return Mapper.mapUser(data);\n  }\n\n  async getUser(userId: number) {\n    const info = await sc.getCache().getOrSet(\n      this.getCacheKeyForFetch('user', { userId }),\n      () => this.getSoundCloudAPI().getUser(userId)\n    );\n\n    if (info) {\n      return Mapper.mapUser(info);\n    }\n\n    return null;\n  }\n}\n"]}