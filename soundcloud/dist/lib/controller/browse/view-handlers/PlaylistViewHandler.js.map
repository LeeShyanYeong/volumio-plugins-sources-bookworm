{"version":3,"file":"PlaylistViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/PlaylistViewHandler.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,mFAA4C;AAE5C,0CAA2C;AAG3C,sEAAkG;AAClG,2CAA2C;AAU3C,MAAqB,mBAAoB,SAAQ,wBAA6D;IAA9G;;;IAyEA,CAAC;IAvEW,gBAAgB;QACxB,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;IACrC,CAAC;IAES,MAAM,CAAC,EAAmB;QAClC,OAAO,uBAAA,IAAI,wEAAa,MAAjB,IAAI,EAAc,EAAE,CAAC,CAAC;IAC/B,CAAC;IAES,OAAO,CAAC,WAAwC;QACxD,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IACrE,CAAC;IAES,gBAAgB;QACxB,OAAO,2BAAE,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;IACvD,CAAC;IAES,cAAc;QACtB,OAAO,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAES,iBAAiB;QACzB,OAAO,2BAAE,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;IACtD,CAAC;IAES,cAAc,CAAC,GAAmB;QAC1C,IAAI,GAAG,CAAC,IAAI,KAAK,UAAU,IAAI,GAAG,CAAC,EAAE,EAAE,CAAC;YACtC,OAAO;gBACL,IAAI,EAAE,UAAU;gBAChB,UAAU,EAAE,GAAG,CAAC,EAAE;aACnB,CAAC;QACJ,CAAC;aACI,IAAI,GAAG,CAAC,IAAI,KAAK,iBAAiB,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC;YAC7D,OAAO;gBACL,IAAI,EAAE,iBAAiB;gBACvB,UAAU,EAAE,GAAG,CAAC,EAAE;gBAClB,GAAG,EAAE,GAAG,CAAC,GAAG;aACb,CAAC;QACJ,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CAgCF;mFA9BC,KAAK,2CAAc,UAA2B;IAC5C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;IAC3C,MAAM,SAAS,GAAG,OAAO,EAAE,SAAS,CAAC;IACrC,MAAM,aAAa,GAAG,2BAAE,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;IAEjE,MAAM,EAAE,GAAG,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAE/D,MAAM,WAAW,GAAmC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;IACzE,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;QACvB,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC;IAC1B,CAAC;IACD,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;QACtB,WAAW,CAAC,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;IACD,IAAI,CAAC,aAAa,EAAE,CAAC;QACnB,WAAW,CAAC,WAAW,GAAG,2BAAE,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;IAC9D,CAAC;IAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;IAEtF,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAC1C,CAAC;IAED,OAAO;QACL,GAAG,EAAE,QAAQ;QACb,YAAY,EAAE,WAAW,CAAC,YAAY;QACtC,WAAW,EAAE,WAAW,CAAC,WAAW;KACrC,CAAC;AACJ,CAAC;kBAxEkB,mBAAmB","sourcesContent":["import sc from '../../../SoundCloudContext';\nimport type PlaylistEntity from '../../../entities/PlaylistEntity';\nimport { ModelType } from '../../../model';\nimport { type PlaylistModelGetPlaylistParams } from '../../../model/PlaylistModel';\nimport { type LoopFetchResult } from '../../../model/BaseModel';\nimport SetViewHandler, { type SetView, type SetViewHandlerGetSetsParams } from './SetViewHandler';\nimport { RendererType } from './renderers';\nimport type BaseRenderer from './renderers/BaseRenderer';\nimport { type TrackOrigin } from './TrackViewHandler';\n\nexport interface PlaylistView extends SetView {\n  name: 'playlists';\n  playlistId?: string;\n  type?: 'system';\n}\n\nexport default class PlaylistViewHandler extends SetViewHandler<PlaylistView, string | number, PlaylistEntity> {\n\n  protected getSetIdFromView(): string | number | null | undefined {\n    return this.currentView.playlistId;\n  }\n\n  protected getSet(id: string | number): Promise<{ set: PlaylistEntity; tracksOffset?: number; tracksLimit?: number; }> {\n    return this.#getPlaylist(id);\n  }\n\n  protected getSets(modelParams: SetViewHandlerGetSetsParams): Promise<LoopFetchResult<PlaylistEntity>> {\n    return this.getModel(ModelType.Playlist).getPlaylists(modelParams);\n  }\n\n  protected getSetsListTitle(): string {\n    return sc.getI18n('SOUNDCLOUD_LIST_TITLE_PLAYLISTS');\n  }\n\n  protected getSetRenderer(): BaseRenderer<PlaylistEntity, PlaylistEntity> {\n    return this.getRenderer(RendererType.Playlist);\n  }\n\n  protected getVisitLinkTitle(): string {\n    return sc.getI18n('SOUNDCLOUD_VISIT_LINK_PLAYLIST');\n  }\n\n  protected getTrackOrigin(set: PlaylistEntity): TrackOrigin | null {\n    if (set.type === 'playlist' && set.id) {\n      return {\n        type: 'playlist',\n        playlistId: set.id\n      };\n    }\n    else if (set.type === 'system-playlist' && set.id && set.urn) {\n      return {\n        type: 'system-playlist',\n        playlistId: set.id,\n        urn: set.urn\n      };\n    }\n    return null;\n  }\n\n  async #getPlaylist(playlistId: string | number) {\n    const { type, pageRef } = this.currentView;\n    const pageToken = pageRef?.pageToken;\n    const loadAllTracks = sc.getConfigValue('loadFullPlaylistAlbum');\n\n    const id = type === 'system' ? playlistId : Number(playlistId);\n\n    const modelParams: PlaylistModelGetPlaylistParams = { loadTracks: true };\n    if (type !== undefined) {\n      modelParams.type = type;\n    }\n    if (Number(pageToken)) {\n      modelParams.tracksOffset = Number(pageToken);\n    }\n    if (!loadAllTracks) {\n      modelParams.tracksLimit = sc.getConfigValue('itemsPerPage');\n    }\n\n    const playlist = await this.getModel(ModelType.Playlist).getPlaylist(id, modelParams);\n\n    if (!playlist) {\n      throw Error('Failed to fetch playlist');\n    }\n\n    return {\n      set: playlist,\n      tracksOffset: modelParams.tracksOffset,\n      tracksLimit: modelParams.tracksLimit\n    };\n  }\n}\n"]}